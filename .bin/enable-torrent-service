#!/bin/bash

#
# Create a function for checking exit-status and outputting success and error messages, also exit or 
# continue depending on exit-status
#

do-status-check () {
	if [ $? -eq 0 ]; then
		echo " Success!"
	else
		echo " $error_msg"
		echo ""
		if [ -n "$log_print" ]; then
			eval "$log_print"
		fi
		## Unset variables
		transmission_config=""
		vpn_ip=""
		log_print=""
		exit 1
	fi
}

#
# Check for existence of tun0, if it doesn't exist try to create it
#
## Set relevant error-message and setup log dumping
error_msg="ERROR Could not create tun0 interface, exiting"
log_print="journalctl -xe --no-pager | tail -n 20"

echo -n "Creating tun0 interface:"
ip a s dev tun0 >/dev/null 2>&1 || sudo openvpn --mktun --dev tun0 --dev-type tun >/dev/null 2>&1

do-status-check



#
# Check if openvpn is already running, if not try to start the openvpn service
#
## Set relevant error-message and setup log dumping
error_msg="ERROR Could not start openvpn-client@ovpn, exiting"
log_print="sudo systemctl status openvpn-client@ovpn --no-pager -l"

echo -n "Starting openvpn-client@ovpn:"
systemctl is-active openvpn-client@ovpn >/dev/null 2>&1 || sudo systemctl start openvpn-client@ovpn

do-status-check



#
# Try to edit transmission configuration file, to bind transmission to new VPN IP
#
## Set relevant error-message and setup log dumping
error_msg="ERROR Could not reconfigure transmission bind-address-ipv4"
log_print="journalctl -xe --no-pager | tail -n 20"

echo -n "Reconfiguring transmission bind-address-ipv4:"

transmission_config="/home/splump/.config/transmission-daemon/settings.json"

## Try to set vpn_ip variable to IP of tun0 interface, exit if no IP can be retrieved
vpn_ip=""
i=0
while [ -z "$vpn_ip" ]; do
	if [ "$i" -eq "10" ]; then
		error_msg="Could not obtain an ip-adress from tun0, exiting"
		echo $error_msg
		exit 1
	fi
	vpn_ip=$(ip addr show tun0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
	sleep 1
	let i=i+1
done

## Edit transmission configuration file with IP from tun0
sed -i "s/^.*ipv4.*/    \"bind-address-ipv4\": \"$vpn_ip\",/" $transmission_config

do-status-check



#
# Try to start Transmission-daemon service
#
## Set relevant error-message and setup log dumping
error_msg="ERROR Could not start transmission.service, exiting"
log_print="sudo systemctl status transmission --no-pager -l"

echo -n "Starting transmission.service:"
sudo systemctl start transmission 

do-status-check



#
# Start daemon to check that transmission is correctly configured through VPN IP changes
#

echo -n "Starting check-torrent-service.service:"
systemctl --user start check-torrent-service

do-status-check



#
# Start flexget
#

echo -n "Starting flexget.service"
systemctl --user start flexget

do-status-check



#
# Show current network info
#

show-ips



#
# Unset variables
#

transmission_config=""
vpn_ip=""
log_print=""

echo ""
exit 0
